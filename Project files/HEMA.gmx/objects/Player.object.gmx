<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_red_walk_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>Solid</parentName>
  <maskName>spr_fencer_mask_large</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player object
global.player_id = id;

state_str = "vomtag_move";

fencer = "red";
hspd = 0;
vspd = 0;
walkspd = 1;
locked_on = true; 
dir = "right"; 
attack_style = 1; 
attack_type = "none"; 
next_action = "none";
check_attack = false;
anim_start = false; 
disable_input = false;
layer_control = false;
block_points = 5;
focus_points = 15;
block_time_regen = 10;
block_time = room_speed*block_time_regen;
feint_attack = false;
double_hit = false;
home_x = x;
home_y = y;
opponent_feint = false;
stand = false;

// techniques
absetzen = false;
timed_parry = false; 

// Bonuses
block_damage  = 0;
prep_spd = 0;
footwork_bonus = false;
block_regen_bonus = 0;


switch(room)
{
    case rm_test_cutting:
        target = Tatami;
        break;
        
    case rm_defense_drill:
        target = Opponent;
        break;
        
    case rm_advanced_techniques:
        target = Opponent;
        break;
}

//state = walk_state;
state = vomtag_move_state;

// Create jacket and pants
jckt = instance_create(x,y,Jacket);
pnts = instance_create(x,y,Pants);

jckt.attached = Player;
pnts.attached = Player;

// Get input
get_input();

// Create the audio emitter
audio_em = audio_emitter_create();

//Setup GUI size
display_set_gui_size(view_wview[0], view_hview[0]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alber Timer

if(keyboard_check(ord('X')))
{
    counter = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// opponent_feint off

opponent_feint = false; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the Player's state

// Get input
switch(room)
{
    case rm_test_cutting:
        get_input_cutting();
            break;
            
    case rm_defense_drill:
         get_input_defense();
            break;
            
    case rm_advanced_techniques:
         get_input_advanced();
            break;
}

if(!layer_control)
{
    depth = -30;
}

// Execute the script
script_execute(state);

// Regen Block Bar
block_bar_regen();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///switch states at animation end
anim_start = false;
layer_control = false;
check_attack = false;

switch(state_str)
{
    case "vomtag_prep":
        attack_style_one();
            break;
            
    case "feint":
        attack_style_one();
            break;
            
    case "oberhau_attack":
        disable_input = false;
        
        if (next_action == "mittelhau_b" || "mittelhau_a")
        {
            state = chain_attack_state;
        }
        else
        {
            state = vomtag_move_state;
        }
            break;
                
    case "mittelhau_attack":
        disable_input = false;
        double_hit = false;
    
        if (next_action == "mittelhau_b" || "mittelhau_a")
        {
            state = chain_attack_state;
        }
        else
        {
            state = vomtag_move_state;
        }
            break;
            
    case "thrust_attack":
        double_hit = false;
        state = pflug_move_state;
            break;
            
    case "change_to_block":
        if (next_action == "thrust")
        {
            state = thrust_attack_state;
            next_action = "none";
        }
        else
        {
            state = pflug_move_state;
        }
            break;
            break;
            
    case "change_from_block":
        state = vomtag_move_state;
            break;
                    
    case "damage":
        disable_input = false;
        state = vomtag_move_state;
            break;
            
    case "stun":
        disable_input = false;
        state = vomtag_move_state;
            break;
    
    case "block":
        if (next_action == "thrust")
        {
            state = thrust_attack_state;
            next_action = "none";
        }
        else
        {
            if (counter == 2)
            {
                state = alber_move_state;
            }
            else
            {
                state = pflug_move_state;
            }
        }
            break;
        
    case "blocked":
        disable_input = false;
        state = vomtag_move_state;
            break;
            
    case "hangen_guard":
        counter = false;
        disable_input = false;
        state = vomtag_move_state;
            break;
            
    case "hangen_block":
        counter = false;
        disable_input = false;
        state = vomtag_move_state;
            break;
            
    case "hangen_attack":
        counter = false;
        disable_input = true;
        attack_style_one();
            break;
            
    case "change_to_alber":
        state = alber_move_state;
            break;
            
    case "counter":
        state = vomtag_move_state;
            break;
            
    case "bind_kron":
        state = bind_kron_two_state;
            break;
            
    case "bind_kron_two":
        image_speed = 0;
        anim_start = true;
        switch(dir)
        {
            case "right":
                image_index = 3;
                break;
            case "left":
                image_index = 3;
                break;
            case "down":
                image_index = 2;
                break;
            case "up":
                image_index = 2;
                break;
        }
            break;

            
    case "erste_winden":
    state = vomtag_move_state;
    disable_input = false;
            break;
            
    case "duplieren":
    state = vomtag_move_state;
    disable_input = false;
            break;
            
    case "grapple":
    state = vomtag_move_state;
    disable_input = false;
            break;
            
    case "thrown":
    state = vomtag_move_state;
    disable_input = false;
            break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
