<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the object

display_set_gui_size(view_wview[0], view_hview[0]);

stop_time = false;
allow_block = true;
allow_attack_block = false;
allow_attack = false;
allow_feint = false;
allow_counter = false;
retry = false;
Player.allow_bind = false;

coins = 0;
tatami_count = 0;
time = 60*30;

tutorial_part = 1;
Player.disable_input = true;
Opponent.disable_input = true;
Opponent.left = false;

with(Opponent)
{
    tutorial_defence_opponent(); 
}

// Create the audio emitter
audio_em = audio_emitter_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to next tutorial part

if (tutorial_part == 2)
{
    tutorial_part = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Watch fighters
var gp_id = 0; 
var keypress = 0; 
var local_retry = false;
var keypress_one = false;
var keypress_two = false;

if(tutorial_part == 32)
{
    if(gamepad_is_connected(gp_id))
    {
        if (gamepad_button_check_pressed(gp_id, gp_face1))
        {
            var keypress_one = 1;
        }
        if (gamepad_button_check_pressed(gp_id, gp_face2))
        {
            var keypress_two = 1;
        }
    }
    else
    {
        if (keyboard_check_pressed(vk_space))
        {
            var keypress_one = 1;
        }
        if (keyboard_check_pressed(ord('C')))
        {
            var keypress_two = 1;
        }
    }
    if (keypress_one)
    {
        Player.block_time = 100;
        tutorial_part = 15;
        time = 60*30;
        coins = 0;
        stop_time = false;
    }  
    if (keypress_two)
    {
        room_goto(rm_menu_selection);
    }  
}
if(tutorial_part == 31)
{
    var change_str = false;
    if(Opponent.state_str == "pflug_move")
    {
        Opponent.state_str = "vomtag_move";
        var change_str = true;
    }
    if(Player.state_str == "vomtag_move" &amp;&amp; Opponent.state_str == "vomtag_move")
    {
        tutorial_part = 32;
        if (change_str)
        {
            Opponent.state_str = "pflug_move";
        }
    }
}
if(tutorial_part == 30)
{
    tutorial_part = 31;
    Player.state = run_to_home;
    Opponent.state = run_to_home;
    Player.disable_input = true;
    Player.block = false;
    Player.attack = false;
    Player.counter = false;
    Player.cancel = false;
    Opponent.block = false;
    Opponent.attack = false; 
    Opponent.counter = false;
    Opponent.cancel = false; 
    Opponent.disable_input = true;
    Player.disable_input = true;
}
if(tutorial_part == 29)
{
    if(gamepad_is_connected(gp_id))
    {
        if (gamepad_button_check_pressed(gp_id, gp_face1))
        {
            var keypress = 1;
        }
    }
    else
    {
        if (keyboard_check_pressed(vk_space))
        {
            var keypress = 1;
        }
    }
    if (keypress)
    {
        Player.block_time = 300;
        tutorial_part = 10;
        var keypress = 0;
        var local_retry = true;
    }    
}
if(tutorial_part == 28)
{
    var change_str = false;
    if(Opponent.state_str == "pflug_move")
    {
        Opponent.state_str = "vomtag_move";
        var change_str = true;
    }
    if(Player.state_str == "vomtag_move" &amp;&amp; Opponent.state_str == "vomtag_move")
    {
        tutorial_part = 29;
        if (change_str)
        {
            Opponent.state_str = "pflug_move";
        }
    }
}
if(tutorial_part == 27)
{
    if (Player.state_str == "vomtag_move" || Player.state_str == "pflug_move")
    {
        tutorial_part = 28;
        Player.state = run_to_home;
        Opponent.state = run_to_home;
        Player.disable_input = true;
        Player.block = false;
        Player.attack = false;
        Player.counter = false;
        Player.cancel = false;
        Opponent.block = false;
        Opponent.attack = false; 
        Opponent.counter = false;
        Opponent.cancel = false; 
        Opponent.disable_input = true;
        Player.disable_input = true;
    }
}
if(tutorial_part == 26)
{
    var change_str = false;
    if(Opponent.state_str == "pflug_move")
    {
        Opponent.state_str = "vomtag_move";
        var change_str = true;
    }
    if(Player.state_str == "vomtag_move" &amp;&amp; Opponent.state_str == "vomtag_move")
    {
        tutorial_part = 10;
        if (change_str)
        {
            Opponent.state_str = "pflug_move";
        }
    }
}
if(tutorial_part == 25)
{
    if (Player.state_str == "vomtag_move" || Player.state_str == "pflug_move")
    {
        tutorial_part = 26;
        Player.state = run_to_home;
        Opponent.state = run_to_home;
        Player.disable_input = true;
        Player.block = false;
        Player.attack = false;
        Player.counter = false;
        Player.cancel = false;
        Opponent.block = false;
        Opponent.attack = false; 
        Opponent.counter = false;
        Opponent.cancel = false; 
        Opponent.disable_input = true;
        Player.disable_input = true;
    }
}
if(tutorial_part == 24)
{
    if(gamepad_is_connected(gp_id))
    {
        if (gamepad_button_check_pressed(gp_id, gp_face1))
        {
            var keypress = 1;
        }
    }
    else
    {
        if (keyboard_check_pressed(vk_space))
        {
            var keypress = 1;
        }
    }
    if (keypress)
    {
        Player.block_time = 300;
        tutorial_part = 20;
        var keypress = 0;
        var local_retry = true;
    }    
}
if(tutorial_part == 23)
{
    var change_str = false;
    if(Opponent.state_str == "pflug_move")
    {
        Opponent.state_str = "vomtag_move";
        var change_str = true;
    }
    if(Player.state_str == "vomtag_move" &amp;&amp; Opponent.state_str == "vomtag_move")
    {
        tutorial_part = 24;
        if (change_str)
        {
            Opponent.state_str = "pflug_move";
        }
    }
}
if(tutorial_part == 22)
{
    if (Player.state_str == "vomtag_move" || Player.state_str == "pflug_move")
    {
        tutorial_part = 23;
        Player.state = run_to_home;
        Opponent.state = run_to_home;
        Player.disable_input = true;
        Player.block = false;
        Player.attack = false;
        Player.counter = false;
        Player.cancel = false;
        Opponent.block = false;
        Opponent.attack = false; 
        Opponent.counter = false;
        Opponent.cancel = false; 
        Opponent.disable_input = true;
        Player.disable_input = true;
    }
}
if(tutorial_part == 21)
{
    if (Player.state_str == "damage" || Player.state_str == "stun")
    {
        tutorial_part = 22;
        Player.disable_input = true;
        Opponent.disable_input = true;
    }
    else if (Opponent.state_str == "stun")
    {
         tutorial_part = 25;
         Player.disable_input = true;
         Opponent.disable_input = true;
    }  
}
if(tutorial_part == 20 &amp;&amp; ! local_retry)
{   
    if(gamepad_is_connected(gp_id))
    {
        if (gamepad_button_check_pressed(gp_id, gp_face1))
        {
            var keypress = 1;
        }
    }
    else
    {
        if (keyboard_check_pressed(vk_space))
        {
            var keypress = 1;
        }
    }
    if (keypress)
    {
        Player.block_time = 300;
        Player.disable_input = false;
        Player.block = false;
        Opponent.disable_input = false;
        allow_block = true;
        allow_attack_block = false;
        tutorial_part = 21;
        with(Opponent)
        {
            tutorial_feint_opponent();
        }    
    } 
}
if(tutorial_part == 19)
{
    if (Opponent.state_str == "vomtag_move" || Opponent.state_str == "pflug_move")
    {
        tutorial_part = 18;
        Player.state = run_to_home;
        Opponent.state = run_to_home;
        Player.disable_input = true;
        Player.block = false;
        Player.attack = false;
        Player.counter = false;
        Player.cancel = false;
        Opponent.block = false;
        Opponent.attack = false; 
        Opponent.counter = false;
        Opponent.cancel = false; 
        Opponent.disable_input = true;
        Player.disable_input = true;
    }
}
if(tutorial_part == 18)
{
    var change_str = false;
    if(Opponent.state_str == "pflug_move")
    {
        Opponent.state_str = "vomtag_move";
        var change_str = true;
    }
    if(Player.state_str == "vomtag_move" &amp;&amp; Opponent.state_str == "vomtag_move")
    {
        tutorial_part = 15;
        if (change_str)
        {
            Opponent.state_str = "pflug_move";
        }
    }
}
if(tutorial_part == 17)
{
    if (Player.state_str == "vomtag_move" || Player.state_str == "pflug_move")
    {
        tutorial_part = 18;
        Player.state = run_to_home;
        Opponent.state = run_to_home;
        Player.disable_input = true;
        Player.block = false;
        Player.attack = false;
        Player.counter = false;
        Player.cancel = false;
        Opponent.block = false;
        Opponent.attack = false; 
        Opponent.counter = false;
        Opponent.cancel = false; 
        Opponent.disable_input = true;
        Player.disable_input = true;
    }
}
if(tutorial_part == 16)
{
    if (Player.state_str == "damage")
    {
        tutorial_part = 17;
        Player.disable_input = true;
        Opponent.disable_input = true;
        
        if (coins &gt; 0)
        {
            coins -= 1;
            
            var img_number = 8;
            var word = instance_create(x,y-28,Word_Small);
            var parent = Player.id;
                        
            with (word)
            {
                image_index = img_number; 
                image_speed = 0;
                attached = parent;
            }
        }
    }
    else if (Opponent.state_str == "damage")
    {
         tutorial_part = 19;
         Player.disable_input = true;
         Opponent.disable_input = true;
         coins += 1;
         
         audio_play_sound_on(audio_em, snd_coin, false, true);
         instance_create(Player.x,Player.y-24,Coin);
    }
}
if(tutorial_part == 15)
{
    Player.disable_input = false;
    Player.block = false;
    Opponent.disable_input = false;
    allow_attack = true;
    allow_counter = true;
    allow_attack_block = true;
    allow_block = true;
    allow_feint = true;
    tutorial_part = 16;
    with(Opponent)
    {
        tutorial_freeplay_opponent();
    }
}
if(tutorial_part == 14)
{
    if(gamepad_is_connected(gp_id))
    {
        if (gamepad_button_check_pressed(gp_id, gp_face2))
        {
            var keypress = 1;
        }
    }
    else
    {
        if (keyboard_check_pressed(ord('C')))
        {
            var keypress = 1;
        }
    }
    if (keypress)
    {
        room_goto(rm_menu_selection);
    }
    else
    {
        if(gamepad_is_connected(gp_id))
        {
            if (gamepad_button_check_pressed(gp_id, gp_face1))
            {
                var keypress = 1;
            }
        }
        else
        {
            if (keyboard_check_pressed(vk_space))
            {
                var keypress = 1;
            }
        }
        if (keypress)
        {
            tutorial_part = 15;
            Player.block_time = 300;
        }
    }
}
if(tutorial_part == 13)
{
    if(Player.state_str == "vomtag_move" &amp;&amp; Opponent.state_str == "vomtag_move")
    {
        tutorial_part = 14;
    }
}
if(tutorial_part == 12)
{
    if (Opponent.state_str == "vomtag_move" || Opponent.state_str == "pflug_move")
    {
        tutorial_part = 13;
        Player.state = run_to_home;
        Opponent.state = run_to_home;
        Player.disable_input = true;
        Player.block = false;
        Player.attack = false;
        Player.counter = false;
        Opponent.block = false;
        Opponent.attack = false; 
        Opponent.counter = false;
        Opponent.cancel = false; 
        Opponent.disable_input = true;
        Player.disable_input = true;
    }
}
if(tutorial_part == 11)
{
    if (Opponent.state_str == "damage")
    {
        tutorial_part = 12;
        Player.disable_input = true;
        Opponent.disable_input = true;
    }
    if (Player.focus_points &lt; 1)
    {
        Player.focus_points = 15;
    }
    if (Player.state_str == "damage")
    {
        tutorial_part = 27;
        Player.disable_input = true;
        Opponent.disable_input = true;
    }   
}
if(tutorial_part == 10 &amp;&amp; !local_retry)
{
    if(gamepad_is_connected(gp_id))
    {
        if (gamepad_button_check_pressed(gp_id, gp_face1))
        {
            var keypress = 1;
        }
    }
    else
    {
        if (keyboard_check_pressed(vk_space))
        {
            var keypress = 1;
        }
    }
    if (keypress)
    {
        tutorial_part = 11;
        Player.disable_input = false;
        Player.block = false;
        Opponent.disable_input = false;
        allow_counter = true;
        allow_attack_block = false;
        allow_block = false;
        Player.block_time = 300;
        
        with (Opponent)
        {
            tutorial_defence_opponent();
        }
    }
}
if(tutorial_part == 9)
{
    if(Player.state_str == "vomtag_move" &amp;&amp; Opponent.state_str == "vomtag_move")
    {
        tutorial_part = 20;
    }
}
if(tutorial_part == 8)
{
    if (Opponent.state_str == "vomtag_move")
    {
        tutorial_part = 9;
        Player.state = run_to_home;
        Opponent.state = run_to_home;
        Player.disable_input = true;
        Player.block = false;
        Player.attack = false;
        Opponent.block = false;
        Opponent.attack = false; 
        Opponent.counter = false;
        Opponent.cancel = false; 
        Opponent.disable_input = true;
        Player.disable_input = true;
    }
}
if(tutorial_part == 7)
{
    if (Opponent.state_str == "damage")
    {
        tutorial_part = 8;
        Player.disable_input = true;
        Opponent.disable_input = true;
    }
    if (Player.state_str == "stun" || Player.state_str == "damage")
    {
        tutorial_part = 3;
        Player.disable_input = true;
        Opponent.disable_input = true;
        retry = true;
    }
}
if(tutorial_part == 6)
{
    if(gamepad_is_connected(gp_id))
    {
        if (gamepad_button_check_pressed(gp_id, gp_face1))
        {
            var keypress = 1;
        }
    }
    else
    {
        if (keyboard_check_pressed(vk_space))
        {
            var keypress = 1;
        }
    }
    if (keypress)
    {
        tutorial_part = 7;
        Player.disable_input = false;
        Player.block = true;
        Opponent.disable_input = false;
        allow_attack_block = true;
        retry = false;
        Player.block_time = 300;
    }
}
if(tutorial_part == 5)
{
    if(gamepad_is_connected(gp_id))
    {
        if (gamepad_button_check_pressed(gp_id, gp_face1))
        {
            var keypress = 1;
        }
    }
    else
    {
        if (keyboard_check_pressed(vk_space))
        {
            var keypress = 1;
        }
    }
    if (keypress)
    {
        tutorial_part = 6;
        Player.block_time = 300;
    }
}
if(tutorial_part == 4)
{
    if(Player.state_str == "vomtag_move" &amp;&amp; Opponent.state_str == "vomtag_move")
    {
       tutorial_part = 5; 
    }
}
if(tutorial_part == 3)
{
    if (Player.state == vomtag_move_state || Player.state == pflug_move_state)
    {
       tutorial_part = 4;
       Player.state = run_to_home;
       Opponent.state = run_to_home;
       Player.disable_input = true;
       Player.block = false;
       Opponent.block = false;
       Opponent.attack = false; 
       Opponent.counter = false;
       Opponent.cancel = false; 
       Opponent.disable_input = true;
    }
}
if(tutorial_part == 2)
{
    if (Player.state_str == "stun")
    {
        tutorial_part = 3;
        Player.disable_input = true;
        Opponent.disable_input = true;
    }
}
if(tutorial_part == 1)
{   
    if(gamepad_is_connected(gp_id))
    {
        if (gamepad_button_check_pressed(gp_id, gp_face3))
        {
            var keypress = 1;
        }
    }
    else
    {
        if (keyboard_check(ord('C')))
        {
            var keypress = 1;
        }
    }
    if (keypress)
    {
        tutorial_part = 2;
        Player.disable_input = false;
        Opponent.disable_input = false; 
        alarm[0] = 10*30;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

draw_set_halign(fa_left);
draw_set_font(fnt_game_small);
var gp_id = 0;

if (tutorial_part == 1)
{
    if(gamepad_is_connected(gp_id))
    {
        var str = "Press and hold [X] to block";
    }
    else
    {
        var str = "Press and hold [C] to block";
    }
    
    draw_sprite(spr_text_box_small, 0, view_wview[0]/2, 48,);
    draw_text_colour(128-16, 48, str, c_white, c_white, c_white, c_white, 1);
}
if (tutorial_part == 5)
{
   if(gamepad_is_connected(gp_id))
    { 
        if (!retry)
        {
            var str = " The block bar reduces with each #attack you block. When the block bar #is empty the next attack will cause #stun damage.## The block bar is the blue bar in the #top left corner.##    Press [A] to continue.";
        }
        else
        {
            var str = " Let's try that again. ###    Press [A] to continue. ";
        }
    }
    else
    { 
        if (!retry)
        {
            var str = " The block bar reduces with each #attack you block. When the block bar #is empty the next attack will cause #stun damage.## The block bar is the blue bar in the #top left corner.##    Press [Space Bar] to continue.";
        }
        else
        {
            var str = " Let's try that again. ###    Press [Space Bar] to continue. ";
        }
    }
    
    if (!retry)
    {
        draw_sprite(spr_text_box_large, 0, view_wview[0]/2, 48,);
        draw_text_colour(86, 48, str, c_white, c_white, c_white, c_white, 1);
    }
    else
    {
        draw_sprite(spr_text_box_medium, 0, view_wview[0]/2, 48,);
        draw_text_colour(86, 48, str, c_white, c_white, c_white, c_white, 1);
    }
}
if (tutorial_part == 6)
{
    if(gamepad_is_connected(gp_id))
    { 
        var str = " While holding [X], press [A] to #thrust. After blocking an attack, try #thrusting the opponent#    Press [A] to continue.";
    }
    else
    { 
        var str = " While holding [C], press [V] to #thrust. After blocking an attack, try #thrusting the opponent#    Press [Space Bar] to continue.";
    }
    
    draw_sprite(spr_text_box_medium, 0, view_wview[0]/2, 48,);
    draw_text_colour(86, 48, str, c_white, c_white, c_white, c_white, 1);
}
if (tutorial_part == 10)
{
    if(gamepad_is_connected(gp_id))
    { 
        var str = " Press and release [Y] to use the #hanging guard. The hanging guard #blocks on-line attacks but not off-line #attacks. If you have at least 5 focus #points in your focus bar, then an #immediate counter attack will be #triggered. The focus bar is the yellow #bar in the top left of the screen. #    Press [A] to continue.";
    }
    else
    { 
        var str = " Press and release [X] to use the #hanging guard. The hanging guard #blocks on-line attacks but not off-line #attacks. If you have at least 5 focus #points in your focus bar, then an #immediate counter attack will be #triggered. The focus bar is the yellow #bar in the top left of the screen. #    Press [Space Bar] to continue.";
    }
    
    draw_sprite(spr_text_box_large, 0, view_wview[0]/2, 48,);
    draw_text_colour(86, 48, str, c_white, c_white, c_white, c_white, 1);
}
if(tutorial_part == 14)
{
    if(gamepad_is_connected(gp_id))
    { 
        var str = " This concludes the defense tutorial. #Press [A] to fight the opponent. #Press [B] to return to the main menu.";
    }
    else
    { 
        var str = " This concludes the defense tutorial. #Press [Space Bar] to fight the #opponent. Press [C] to return to the #main menu.";
    }
    draw_sprite(spr_text_box_medium, 0, view_wview[0]/2, 48,);
    draw_text_colour(86, 48, str, c_white, c_white, c_white, c_white, 1);
}
if(tutorial_part == 20)
{
    if(gamepad_is_connected(gp_id))
    { 
        var str = " Feints do double block damage. #If an opponent feints while you are #blocking (holding [X]), tap [X] again. #This will block the feint and stun the #opponent. ##Try to block the opponents feint. #    Press [A] to continue";
    }
    else
    { 
        var str = " Feints do double block damage. #If an opponent feints while you are #blocking (holding [C]), tap [C] again. #This will block the feint and stun the #opponent. ##Try to block the opponents feint. #    Press [Space Bar] to continue"
    }
    draw_sprite(spr_text_box_large, 0, view_wview[0]/2, 48,);
    draw_text_colour(86, 48, str, c_white, c_white, c_white, c_white, 1);
}
if(tutorial_part == 24)
{
    if(gamepad_is_connected(gp_id))
    { 
        var str = " Let's try that again. ###    Press [A] to continue. ";
    }
    else
    { 
        var str = " Let's try that again. ###    Press [Space Bar] to continue. ";
    }
    draw_sprite(spr_text_box_medium, 0, view_wview[0]/2, 48,);
    draw_text_colour(86, 48, str, c_white, c_white, c_white, c_white, 1);
}
if (tutorial_part == 29)
{
    if(gamepad_is_connected(gp_id))
    { 
        var str = " Let's try that again. ###    Press [A] to continue. ";
    }
    else
    { 
        var str = " Let's try that again. ###    Press [Space Bar] to continue. ";
    }
    draw_sprite(spr_text_box_medium, 0, view_wview[0]/2, 48,);
    draw_text_colour(86, 48, str, c_white, c_white, c_white, c_white, 1);
}
if (tutorial_part &gt;= 15 &amp;&amp; tutorial_part &lt;= 19)
{
    // Draw the coins
    draw_set_halign(fa_right);
    draw_set_font(fnt_game);
    var str = ": "+string(coins);
    draw_text_colour(320+16, 8, str, c_white, c_white, c_white, c_white, 1);

    var text_width = string_width(str);
    draw_sprite(spr_gui_coin, 0, 308+16-text_width, 16);
    
    // adding to the time
    if (!stop_time &amp;&amp; time &gt; 0)
    {
        time -= 1;
    }
    
    /// Stop the game

    if (time &lt; 1)
    {
        if (!stop_time)
        {   
            stop_time = true;
            tutorial_part = 30; 
        }
    }
    
    // Draw the timer
    draw_text_colour(view_wview[0]/2+32, 8, "Time: "+string(floor(time /room_speed)), c_white, c_white, c_white, c_white, 1); 
}
if (tutorial_part == 32)
{
    Player.focus_points = 15;
    draw_set_halign(fa_left);
    draw_set_font(fnt_game_small);
    
    draw_sprite(spr_text_box_medium, 0, view_wview[0]/2, 48,);
    
    if(gamepad_is_connected(gp_id))
    { 
        draw_text_colour(86, 48, "Your Score Was: " + string(coins) + "##To fight again press [A].#To return to the menu press [B].", c_white, c_white, c_white, c_white, 1);
    }
    else
    { 
        draw_text_colour(86, 48, "Your Score Was: " + string(coins) + "##To fight again press [Space Bar].#To return to the menu press [C].", c_white, c_white, c_white, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
